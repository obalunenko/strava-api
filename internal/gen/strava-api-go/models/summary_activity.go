// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryActivity summary activity
//
// swagger:model summaryActivity
type SummaryActivity struct {
	MetaActivity

	HeartRateDetails

	// The number of achievements gained during this activity
	AchievementCount int64 `json:"achievement_count,omitempty"`

	// athlete
	Athlete *MetaAthlete `json:"athlete,omitempty"`

	// The number of athletes for taking part in a group activity
	// Minimum: 1
	AthleteCount int64 `json:"athlete_count,omitempty"`

	// The activity's average speed, in meters per second
	AverageSpeed float32 `json:"average_speed,omitempty"`

	// Average power output in watts during this activity. Rides only
	AverageWatts float32 `json:"average_watts,omitempty"`

	// The number of comments for this activity
	CommentCount int64 `json:"comment_count,omitempty"`

	// Whether this activity is a commute
	Commute bool `json:"commute,omitempty"`

	// Whether the watts are from a power meter, false if estimated
	DeviceWatts bool `json:"device_watts,omitempty"`

	// The activity's distance, in meters
	Distance float32 `json:"distance,omitempty"`

	// The activity's elapsed time, in seconds
	ElapsedTime int64 `json:"elapsed_time,omitempty"`

	// The activity's highest elevation, in meters
	ElevHigh float32 `json:"elev_high,omitempty"`

	// The activity's lowest elevation, in meters
	ElevLow float32 `json:"elev_low,omitempty"`

	// end latlng
	EndLatlng LatLng `json:"end_latlng,omitempty"`

	// The identifier provided at upload time
	ExternalID string `json:"external_id,omitempty"`

	// Whether this activity is flagged
	Flagged bool `json:"flagged,omitempty"`

	// The id of the gear for the activity
	GearID string `json:"gear_id,omitempty"`

	// Whether the logged-in athlete has kudoed this activity
	HasKudoed bool `json:"has_kudoed,omitempty"`

	// Whether the activity is muted
	HideFromHome bool `json:"hide_from_home,omitempty"`

	// The total work done in kilojoules during this activity. Rides only
	Kilojoules float32 `json:"kilojoules,omitempty"`

	// The number of kudos given for this activity
	KudosCount int64 `json:"kudos_count,omitempty"`

	// Whether this activity was created manually
	Manual bool `json:"manual,omitempty"`

	// map
	Map *PolylineMap `json:"map,omitempty"`

	// The activity's max speed, in meters per second
	MaxSpeed float32 `json:"max_speed,omitempty"`

	// Rides with power meter data only
	MaxWatts int64 `json:"max_watts,omitempty"`

	// The activity's moving time, in seconds
	MovingTime int64 `json:"moving_time,omitempty"`

	// The name of the activity
	Name string `json:"name,omitempty"`

	// The number of Instagram photos for this activity
	PhotoCount int64 `json:"photo_count,omitempty"`

	// Whether this activity is private
	Private bool `json:"private,omitempty"`

	// sport type
	SportType SportType `json:"sport_type,omitempty"`

	// The time at which the activity was started.
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`

	// The time at which the activity was started in the local timezone.
	// Format: date-time
	StartDateLocal strfmt.DateTime `json:"start_date_local,omitempty"`

	// start latlng
	StartLatlng LatLng `json:"start_latlng,omitempty"`

	// The timezone of the activity
	Timezone string `json:"timezone,omitempty"`

	// The activity's total elevation gain.
	TotalElevationGain float32 `json:"total_elevation_gain,omitempty"`

	// The number of Instagram and Strava photos for this activity
	TotalPhotoCount int64 `json:"total_photo_count,omitempty"`

	// Whether this activity was recorded on a training machine
	Trainer bool `json:"trainer,omitempty"`

	// type
	Type ActivityType `json:"type,omitempty"`

	// The identifier of the upload that resulted in this activity
	UploadID int64 `json:"upload_id,omitempty"`

	// The unique identifier of the upload in string format
	UploadIDStr string `json:"upload_id_str,omitempty"`

	// Similar to Normalized Power. Rides with power meter data only
	WeightedAverageWatts int64 `json:"weighted_average_watts,omitempty"`

	// The activity's workout type
	WorkoutType int64 `json:"workout_type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SummaryActivity) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MetaActivity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MetaActivity = aO0

	// AO1
	var aO1 HeartRateDetails
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.HeartRateDetails = aO1

	// AO2
	var dataAO2 struct {
		AchievementCount int64 `json:"achievement_count,omitempty"`

		Athlete *MetaAthlete `json:"athlete,omitempty"`

		AthleteCount int64 `json:"athlete_count,omitempty"`

		AverageSpeed float32 `json:"average_speed,omitempty"`

		AverageWatts float32 `json:"average_watts,omitempty"`

		CommentCount int64 `json:"comment_count,omitempty"`

		Commute bool `json:"commute,omitempty"`

		DeviceWatts bool `json:"device_watts,omitempty"`

		Distance float32 `json:"distance,omitempty"`

		ElapsedTime int64 `json:"elapsed_time,omitempty"`

		ElevHigh float32 `json:"elev_high,omitempty"`

		ElevLow float32 `json:"elev_low,omitempty"`

		EndLatlng LatLng `json:"end_latlng,omitempty"`

		ExternalID string `json:"external_id,omitempty"`

		Flagged bool `json:"flagged,omitempty"`

		GearID string `json:"gear_id,omitempty"`

		HasKudoed bool `json:"has_kudoed,omitempty"`

		HideFromHome bool `json:"hide_from_home,omitempty"`

		Kilojoules float32 `json:"kilojoules,omitempty"`

		KudosCount int64 `json:"kudos_count,omitempty"`

		Manual bool `json:"manual,omitempty"`

		Map *PolylineMap `json:"map,omitempty"`

		MaxSpeed float32 `json:"max_speed,omitempty"`

		MaxWatts int64 `json:"max_watts,omitempty"`

		MovingTime int64 `json:"moving_time,omitempty"`

		Name string `json:"name,omitempty"`

		PhotoCount int64 `json:"photo_count,omitempty"`

		Private bool `json:"private,omitempty"`

		SportType SportType `json:"sport_type,omitempty"`

		StartDate strfmt.DateTime `json:"start_date,omitempty"`

		StartDateLocal strfmt.DateTime `json:"start_date_local,omitempty"`

		StartLatlng LatLng `json:"start_latlng,omitempty"`

		Timezone string `json:"timezone,omitempty"`

		TotalElevationGain float32 `json:"total_elevation_gain,omitempty"`

		TotalPhotoCount int64 `json:"total_photo_count,omitempty"`

		Trainer bool `json:"trainer,omitempty"`

		Type ActivityType `json:"type,omitempty"`

		UploadID int64 `json:"upload_id,omitempty"`

		UploadIDStr string `json:"upload_id_str,omitempty"`

		WeightedAverageWatts int64 `json:"weighted_average_watts,omitempty"`

		WorkoutType int64 `json:"workout_type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.AchievementCount = dataAO2.AchievementCount

	m.Athlete = dataAO2.Athlete

	m.AthleteCount = dataAO2.AthleteCount

	m.AverageSpeed = dataAO2.AverageSpeed

	m.AverageWatts = dataAO2.AverageWatts

	m.CommentCount = dataAO2.CommentCount

	m.Commute = dataAO2.Commute

	m.DeviceWatts = dataAO2.DeviceWatts

	m.Distance = dataAO2.Distance

	m.ElapsedTime = dataAO2.ElapsedTime

	m.ElevHigh = dataAO2.ElevHigh

	m.ElevLow = dataAO2.ElevLow

	m.EndLatlng = dataAO2.EndLatlng

	m.ExternalID = dataAO2.ExternalID

	m.Flagged = dataAO2.Flagged

	m.GearID = dataAO2.GearID

	m.HasKudoed = dataAO2.HasKudoed

	m.HideFromHome = dataAO2.HideFromHome

	m.Kilojoules = dataAO2.Kilojoules

	m.KudosCount = dataAO2.KudosCount

	m.Manual = dataAO2.Manual

	m.Map = dataAO2.Map

	m.MaxSpeed = dataAO2.MaxSpeed

	m.MaxWatts = dataAO2.MaxWatts

	m.MovingTime = dataAO2.MovingTime

	m.Name = dataAO2.Name

	m.PhotoCount = dataAO2.PhotoCount

	m.Private = dataAO2.Private

	m.SportType = dataAO2.SportType

	m.StartDate = dataAO2.StartDate

	m.StartDateLocal = dataAO2.StartDateLocal

	m.StartLatlng = dataAO2.StartLatlng

	m.Timezone = dataAO2.Timezone

	m.TotalElevationGain = dataAO2.TotalElevationGain

	m.TotalPhotoCount = dataAO2.TotalPhotoCount

	m.Trainer = dataAO2.Trainer

	m.Type = dataAO2.Type

	m.UploadID = dataAO2.UploadID

	m.UploadIDStr = dataAO2.UploadIDStr

	m.WeightedAverageWatts = dataAO2.WeightedAverageWatts

	m.WorkoutType = dataAO2.WorkoutType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SummaryActivity) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.MetaActivity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.HeartRateDetails)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		AchievementCount int64 `json:"achievement_count,omitempty"`

		Athlete *MetaAthlete `json:"athlete,omitempty"`

		AthleteCount int64 `json:"athlete_count,omitempty"`

		AverageSpeed float32 `json:"average_speed,omitempty"`

		AverageWatts float32 `json:"average_watts,omitempty"`

		CommentCount int64 `json:"comment_count,omitempty"`

		Commute bool `json:"commute,omitempty"`

		DeviceWatts bool `json:"device_watts,omitempty"`

		Distance float32 `json:"distance,omitempty"`

		ElapsedTime int64 `json:"elapsed_time,omitempty"`

		ElevHigh float32 `json:"elev_high,omitempty"`

		ElevLow float32 `json:"elev_low,omitempty"`

		EndLatlng LatLng `json:"end_latlng,omitempty"`

		ExternalID string `json:"external_id,omitempty"`

		Flagged bool `json:"flagged,omitempty"`

		GearID string `json:"gear_id,omitempty"`

		HasKudoed bool `json:"has_kudoed,omitempty"`

		HideFromHome bool `json:"hide_from_home,omitempty"`

		Kilojoules float32 `json:"kilojoules,omitempty"`

		KudosCount int64 `json:"kudos_count,omitempty"`

		Manual bool `json:"manual,omitempty"`

		Map *PolylineMap `json:"map,omitempty"`

		MaxSpeed float32 `json:"max_speed,omitempty"`

		MaxWatts int64 `json:"max_watts,omitempty"`

		MovingTime int64 `json:"moving_time,omitempty"`

		Name string `json:"name,omitempty"`

		PhotoCount int64 `json:"photo_count,omitempty"`

		Private bool `json:"private,omitempty"`

		SportType SportType `json:"sport_type,omitempty"`

		StartDate strfmt.DateTime `json:"start_date,omitempty"`

		StartDateLocal strfmt.DateTime `json:"start_date_local,omitempty"`

		StartLatlng LatLng `json:"start_latlng,omitempty"`

		Timezone string `json:"timezone,omitempty"`

		TotalElevationGain float32 `json:"total_elevation_gain,omitempty"`

		TotalPhotoCount int64 `json:"total_photo_count,omitempty"`

		Trainer bool `json:"trainer,omitempty"`

		Type ActivityType `json:"type,omitempty"`

		UploadID int64 `json:"upload_id,omitempty"`

		UploadIDStr string `json:"upload_id_str,omitempty"`

		WeightedAverageWatts int64 `json:"weighted_average_watts,omitempty"`

		WorkoutType int64 `json:"workout_type,omitempty"`
	}

	dataAO2.AchievementCount = m.AchievementCount

	dataAO2.Athlete = m.Athlete

	dataAO2.AthleteCount = m.AthleteCount

	dataAO2.AverageSpeed = m.AverageSpeed

	dataAO2.AverageWatts = m.AverageWatts

	dataAO2.CommentCount = m.CommentCount

	dataAO2.Commute = m.Commute

	dataAO2.DeviceWatts = m.DeviceWatts

	dataAO2.Distance = m.Distance

	dataAO2.ElapsedTime = m.ElapsedTime

	dataAO2.ElevHigh = m.ElevHigh

	dataAO2.ElevLow = m.ElevLow

	dataAO2.EndLatlng = m.EndLatlng

	dataAO2.ExternalID = m.ExternalID

	dataAO2.Flagged = m.Flagged

	dataAO2.GearID = m.GearID

	dataAO2.HasKudoed = m.HasKudoed

	dataAO2.HideFromHome = m.HideFromHome

	dataAO2.Kilojoules = m.Kilojoules

	dataAO2.KudosCount = m.KudosCount

	dataAO2.Manual = m.Manual

	dataAO2.Map = m.Map

	dataAO2.MaxSpeed = m.MaxSpeed

	dataAO2.MaxWatts = m.MaxWatts

	dataAO2.MovingTime = m.MovingTime

	dataAO2.Name = m.Name

	dataAO2.PhotoCount = m.PhotoCount

	dataAO2.Private = m.Private

	dataAO2.SportType = m.SportType

	dataAO2.StartDate = m.StartDate

	dataAO2.StartDateLocal = m.StartDateLocal

	dataAO2.StartLatlng = m.StartLatlng

	dataAO2.Timezone = m.Timezone

	dataAO2.TotalElevationGain = m.TotalElevationGain

	dataAO2.TotalPhotoCount = m.TotalPhotoCount

	dataAO2.Trainer = m.Trainer

	dataAO2.Type = m.Type

	dataAO2.UploadID = m.UploadID

	dataAO2.UploadIDStr = m.UploadIDStr

	dataAO2.WeightedAverageWatts = m.WeightedAverageWatts

	dataAO2.WorkoutType = m.WorkoutType

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this summary activity
func (m *SummaryActivity) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MetaActivity
	if err := m.MetaActivity.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HeartRateDetails
	if err := m.HeartRateDetails.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthlete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthleteCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndLatlng(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSportType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartLatlng(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryActivity) validateAthlete(formats strfmt.Registry) error {
	if swag.IsZero(m.Athlete) { // not required
		return nil
	}

	if m.Athlete != nil {
		if err := m.Athlete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("athlete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("athlete")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryActivity) validateAthleteCount(formats strfmt.Registry) error {
	if swag.IsZero(m.AthleteCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("athlete_count", "body", m.AthleteCount, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *SummaryActivity) validateEndLatlng(formats strfmt.Registry) error {
	if swag.IsZero(m.EndLatlng) { // not required
		return nil
	}

	if err := m.EndLatlng.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("end_latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("end_latlng")
		}
		return err
	}

	return nil
}

func (m *SummaryActivity) validateMap(formats strfmt.Registry) error {
	if swag.IsZero(m.Map) { // not required
		return nil
	}

	if m.Map != nil {
		if err := m.Map.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("map")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("map")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryActivity) validateSportType(formats strfmt.Registry) error {
	if swag.IsZero(m.SportType) { // not required
		return nil
	}

	if err := m.SportType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sport_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sport_type")
		}
		return err
	}

	return nil
}

func (m *SummaryActivity) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SummaryActivity) validateStartDateLocal(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateLocal) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date_local", "body", "date-time", m.StartDateLocal.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SummaryActivity) validateStartLatlng(formats strfmt.Registry) error {
	if swag.IsZero(m.StartLatlng) { // not required
		return nil
	}

	if err := m.StartLatlng.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("start_latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("start_latlng")
		}
		return err
	}

	return nil
}

func (m *SummaryActivity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this summary activity based on the context it is used
func (m *SummaryActivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MetaActivity
	if err := m.MetaActivity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HeartRateDetails
	if err := m.HeartRateDetails.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAthlete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndLatlng(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSportType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartLatlng(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryActivity) contextValidateAthlete(ctx context.Context, formats strfmt.Registry) error {
	if m.Athlete != nil {

		if swag.IsZero(m.Athlete) { // not required
			return nil
		}

		if err := m.Athlete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("athlete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("athlete")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryActivity) contextValidateEndLatlng(ctx context.Context, formats strfmt.Registry) error {
	if err := m.EndLatlng.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("end_latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("end_latlng")
		}
		return err
	}

	return nil
}

func (m *SummaryActivity) contextValidateMap(ctx context.Context, formats strfmt.Registry) error {
	if m.Map != nil {

		if swag.IsZero(m.Map) { // not required
			return nil
		}

		if err := m.Map.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("map")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("map")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryActivity) contextValidateSportType(ctx context.Context, formats strfmt.Registry) error {
	if swag.IsZero(m.SportType) { // not required
		return nil
	}

	if err := m.SportType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sport_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sport_type")
		}
		return err
	}

	return nil
}

func (m *SummaryActivity) contextValidateStartLatlng(ctx context.Context, formats strfmt.Registry) error {
	if err := m.StartLatlng.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("start_latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("start_latlng")
		}
		return err
	}

	return nil
}

func (m *SummaryActivity) contextValidateType(ctx context.Context, formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummaryActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryActivity) UnmarshalBinary(b []byte) error {
	var res SummaryActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
