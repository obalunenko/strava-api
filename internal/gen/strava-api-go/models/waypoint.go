// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Waypoint waypoint
//
// swagger:model waypoint
type Waypoint struct {

	// Categories that the waypoint belongs to
	// Min Items: 0
	Categories []string `json:"categories"`

	// A description of the waypoint (optional)
	Description string `json:"description,omitempty"`

	// The number meters along the route that the waypoint is located
	DistanceIntoRoute int64 `json:"distance_into_route,omitempty"`

	// latlng
	Latlng LatLng `json:"latlng,omitempty"`

	// target latlng
	TargetLatlng LatLng `json:"target_latlng,omitempty"`

	// A title for the waypoint
	Title string `json:"title,omitempty"`
}

// Validate validates this waypoint
func (m *Waypoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatlng(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetLatlng(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Waypoint) validateCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	iCategoriesSize := int64(len(m.Categories))

	if err := validate.MinItems("categories", "body", iCategoriesSize, 0); err != nil {
		return err
	}

	return nil
}

func (m *Waypoint) validateLatlng(formats strfmt.Registry) error {
	if swag.IsZero(m.Latlng) { // not required
		return nil
	}

	if err := m.Latlng.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("latlng")
		}
		return err
	}

	return nil
}

func (m *Waypoint) validateTargetLatlng(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetLatlng) { // not required
		return nil
	}

	if err := m.TargetLatlng.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target_latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("target_latlng")
		}
		return err
	}

	return nil
}

// ContextValidate validate this waypoint based on the context it is used
func (m *Waypoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLatlng(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetLatlng(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Waypoint) contextValidateLatlng(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Latlng.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("latlng")
		}
		return err
	}

	return nil
}

func (m *Waypoint) contextValidateTargetLatlng(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TargetLatlng.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target_latlng")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("target_latlng")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Waypoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Waypoint) UnmarshalBinary(b []byte) error {
	var res Waypoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
